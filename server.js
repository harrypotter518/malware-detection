const NodeClam = require('clamscan');
const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');
const dotenv = require('dotenv');

const GraphQLUpload = require("graphql-upload/GraphQLUpload.js");
const graphqlUploadExpress = require("graphql-upload/graphqlUploadExpress.js");

const fs = require("fs")
const path = require("path")
const uploadDir = 'uploads'

dotenv.config()

const avConfig = {
  removeInfected: true,
  quarantineInfected: false,
  debug_mode: false,
  preference: 'clamdscan',
  clamdscan: {
    host: process.env.CLAMD_IP || '127.0.0.1',
    port: process.env.CLAMD_PORT || 3310,
    timeout: parseInt(process.env.CLAMD_TIMEOUT || 60000),
    socket: null,
    active: true,
  },
};
let clamscan;

const typeDefs = gql`
  # The implementation for this scalar is provided by the
  # 'GraphQLUpload' export from the 'graphql-upload' package
  # in the resolver map below.
  scalar Upload

  type Info {
    isInfected: Boolean!
    viruses: [String]!
    filename: String! 
  }

  type File {
    isInfected: Boolean!
    isUploaded: Boolean!
    viruses: [String]!
    filename: String!
  }
  
  type Query {
    hello: String!
  }

  type Mutation {
    detectMalware(file: Upload!): Info!
    bulkDetectMalware (files: [Upload]!) : [Info]!
    singleUploadFile(file: Upload!): File!
    multipleUploadFile (files: [Upload]!) : [File]!
  }
`;

const scanFile = async (file) => {
  const { createReadStream, filename, mimetype, encoding } = await file;
  const stream = createReadStream();
  const result = await clamscan.scanStream(stream);
  return {
    isInfected: result.isInfected,
    viruses: result.viruses,
    filename: filename
  }
};

const uploadFile = async (file) => {
  const { createReadStream, filename, mimetype, encoding } = await file;
  const uid = Date.now().toString(36) + Math.random().toString(36).substring(2);
  const newFilename = `${uid}_${filename}`;
  const stream = createReadStream();
  const out = fs.createWriteStream(path.join(__dirname, `/${uploadDir}/${newFilename}`));
  await stream.pipe(out);
  return {
    status: 'success',
    filename: newFilename
  };
}

const resolvers = {
  Upload: GraphQLUpload,

  Query: {
    hello: () => 'Hello World'
  },

  Mutation: {
    detectMalware: async (parent, { file }) => {
      return await scanFile(file);
    },
    bulkDetectMalware: async (parent, args) => {
      return (await Promise.all(args.files)).map(async (file) => {
        return await scanFile(file);
      });
    },
    singleUploadFile: async (parent, { file }) => {
      let res;
      const scanRes = await scanFile(file);
      if (scanRes && !scanRes.isInfected) {
        const uploadRes = await uploadFile(file);
        res = { ...scanRes, isUploaded: true };
      } else if (scanRes) {
        res = { ...scanRes, isUploaded: false };
      } else {
        res = {
          isInfected: false,
          viruses: [],
          filename: "",
          isUploaded: false
        };
      }
      return res;
    },
    multipleUploadFile: async (parent, args) => {
      let obj = (await Promise.all(args.files)).map(async (file) => {
        let res;
        const scanRes = await scanFile(file);
        if (scanRes && !scanRes.isInfected) {
          const uploadRes = await uploadFile(file);
          res = { ...scanRes, isUploaded: true };
        } else if (scanRes) {
          res = { ...scanRes, isUploaded: false };
        } else {
          res = {
            isInfected: false,
            viruses: [],
            filename: "",
            isUploaded: false
          };
        }
        return res;
      });
      return obj
    }
  },
};

async function startServer() {
  clamscan = await new NodeClam().init(avConfig);

  const server = new ApolloServer({
    typeDefs,
    resolvers,
  });
  await server.start();

  const app = express();

  // This middleware should be added before calling `applyMiddleware`.
  app.use(graphqlUploadExpress());

  server.applyMiddleware({ app });

  await new Promise(r => app.listen({ port: 4002 }, '0.0.0.0', r));

  console.log(`ðŸš€ Server ready at http://0.0.0.0:4002${server.graphqlPath}`);
}

startServer().then(r => {});
